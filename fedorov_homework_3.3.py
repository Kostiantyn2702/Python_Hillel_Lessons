"""
1) У вас есть переменная my_str, тип - str. И переменная my_symbol, тип - str.
Напечатать столько раз my_symbol, сколько он встречается в my_str.
Пример:  my_str="blablacar", my_symbol="bla".
Вывод на экран:
blabla
"""

# Взял блаблакар как пример, но по идее в других случаях та же логика.
print("Задание № 1")
my_str = "blablacar"
my_symbol = "bla"

my_symbol_counter = my_str.count(my_symbol)
print(my_symbol * my_symbol_counter)

#####################################################

"""
2) У вас есть переменная my_str, тип - str. И переменная my_symbol, тип - str. 
Напечатать ЧИСЛО сколько раз my_symbol встречается в my_str. 
Пример:  my_str="blablacar", my_symbol="bla".
Вывод на экран:
2
"""

print("Задание № 2")
my_str = "blablacarblaghsdergbla"
my_symbol = "bla"

my_symbol_counter = my_str.count(my_symbol)
print(my_symbol_counter)

#####################################################

"""
3) У вас есть переменная my_str, тип - str. 
Напечатать ЧИСЛО сколько РАЗНЫХ символов встречается в my_str. 
Большая и маленькая буква считается как один символ. 
Пробелы, запятые и т.д. считаем тоже как символы.
Пример:  my_str="bla BLA car". 
Вывод на экран:
6
"""

# Нашел на ПайтонВорлде функцию set() которая разбиват строку на символы и делает из нее массив неповторяющихся данных
print("Задание № 3")
my_str = "bla BLA car!@@@2311," # Мой текст
my_str = set(my_str.lower()) # Привел к нижнему регистру чтобы большие символы не считались
print(my_str) # Теперь строка превратилась в массив из неповторящихся символов
print(len(my_str)) # Подсчитал количество элементов


# Можно было подсчитать количество повторений каждого символа через .сount и ввести переменную счетчик.
# Если .count насчитал больше 1-го повторения, то добавить в счетчик +1, если 0, то не добавлять.
# Мне показалось что такой вариант слишком крокодильный, нужно учесть все символы и написать кучу строк кода.
